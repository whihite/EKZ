<Window x:Class="TestEkz.PartnersWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Управление партнерами" Height="500" Width="900"
        Icon="/Images/Мастер пол.ico">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0,0,0,10">
            <TextBox x:Name="SearchTextBox" Width="200" Margin="0,0,10,0" 
                     TextChanged="SearchTextBox_TextChanged"/>
            <Button Content="Обновить скидки" Margin="5" Click="UpdateDiscountsButton_Click"/>
        </StackPanel>

        <DataGrid x:Name="PartnersDataGrid" Grid.Row="1" AutoGenerateColumns="False" 
                 IsReadOnly="True" SelectionMode="Single">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Название" Binding="{Binding CompanyName}" Width="150"/>
                <DataGridTextColumn Header="Тип партнера" Binding="{Binding PartnerType.TypeName}" Width="120"/>
                <DataGridTextColumn Header="ИНН" Binding="{Binding TaxId}" Width="100"/>
                <DataGridTextColumn Header="Телефон" Binding="{Binding Phone}" Width="120"/>
                <DataGridTextColumn Header="Объем продаж" Binding="{Binding TotalSalesVolume, StringFormat=N2}" Width="120"/>
                <DataGridTextColumn Header="Текущая скидка" Binding="{Binding CurrentDiscount, StringFormat={}{0}%}" Width="100"/>
                <DataGridTextColumn Header="Рейтинг" Binding="{Binding Rating, StringFormat=N2}" Width="80"/>
                <DataGridTextColumn Header="Email" Binding="{Binding Email}" Width="150"/>
            </DataGrid.Columns>
        </DataGrid>

        <StackPanel Orientation="Horizontal" Grid.Row="2" HorizontalAlignment="Right">
            <Button Content="Добавить" Width="80" Margin="5" Click="AddButton_Click"/>
            <Button Content="Редактировать" Width="100" Margin="5" Click="EditButton_Click"/>
            <Button Content="Удалить" Width="80" Margin="5" Click="DeleteButton_Click"/>
            <Button Content="История продаж" Width="120" Margin="5" Click="SalesHistoryButton_Click"/>
        </StackPanel>
    </Grid>
</Window>




using System.Windows;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using TestEkz.Entities;

namespace TestEkz
{
    public partial class PartnersWindow : Window
    {
        public PartnersWindow()
        {
            InitializeComponent();
            LoadPartners();
        }

        private void LoadPartners(string searchText = null)
        {
            using (var context = new TestEkzContext())
            {
                var query = context.Partners
                    .Include(p => p.PartnerType)
                    .AsQueryable();

                if (!string.IsNullOrEmpty(searchText))
                {
                    query = query.Where(p =>
                        p.CompanyName.Contains(searchText) ||
                        p.TaxId.Contains(searchText) ||
                        p.Phone.Contains(searchText) ||
                        p.Email.Contains(searchText));
                }

                PartnersDataGrid.ItemsSource = query.ToList();
            }
        }

        private void SearchTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            LoadPartners(SearchTextBox.Text);
        }

        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new PartnerDialogWindow();
            if (dialog.ShowDialog() == true)
            {
                using (var context = new TestEkzContext())
                {
                    context.Partners.Add(dialog.Partner);
                    context.SaveChanges();
                }
                LoadPartners();
            }
        }

        private void EditButton_Click(object sender, RoutedEventArgs e)
        {
            if (PartnersDataGrid.SelectedItem is Partner selectedPartner)
            {
                var dialog = new PartnerDialogWindow(selectedPartner);
                if (dialog.ShowDialog() == true)
                {
                    using (var context = new TestEkzContext())
                    {
                        var partnerToUpdate = context.Partners.Find(selectedPartner.PartnerId);
                        if (partnerToUpdate != null)
                        {
                            partnerToUpdate.CompanyName = dialog.Partner.CompanyName;
                            partnerToUpdate.TaxId = dialog.Partner.TaxId;
                            partnerToUpdate.Phone = dialog.Partner.Phone;
                            partnerToUpdate.Email = dialog.Partner.Email;
                            partnerToUpdate.DirectorName = dialog.Partner.DirectorName;
                            partnerToUpdate.LegalAddress = dialog.Partner.LegalAddress;
                            partnerToUpdate.PartnerTypeId = dialog.Partner.PartnerTypeId;

                            context.SaveChanges();
                        }
                    }
                    LoadPartners();
                }
            }
            else
            {
                MessageBox.Show("Выберите партнера для редактирования!");
            }
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (PartnersDataGrid.SelectedItem is Partner selectedPartner)
            {
                var result = MessageBox.Show($"Удалить партнера: '{selectedPartner.CompanyName}'?",
                    "Подтвердить", MessageBoxButton.YesNo);

                if (result == MessageBoxResult.Yes)
                {
                    using (var context = new TestEkzContext())
                    {
                        var partnerToDelete = context.Partners.Find(selectedPartner.PartnerId);
                        if (partnerToDelete != null)
                        {
                            context.Partners.Remove(partnerToDelete);
                            context.SaveChanges();
                        }
                    }
                    LoadPartners();
                }
            }
            else
            {
                MessageBox.Show("Выберите партнера для удаления!");
            }
        }

        private void SalesHistoryButton_Click(object sender, RoutedEventArgs e)
        {
            if (PartnersDataGrid.SelectedItem is Partner selectedPartner)
            {
                var historyWindow = new PartnerSalesHistoryWindow(selectedPartner);
                historyWindow.ShowDialog();
            }
            else
            {
                MessageBox.Show("Выберите партнера для просмотра истории продаж!");
            }
        }

        private void UpdateDiscountsButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                using (var context = new TestEkzContext())
                {
                    var partners = context.Partners
                        .Include(p => p.Orders)
                        .ToList();

                    foreach (var partner in partners)
                    {
                        var totalSales = partner.Orders?.Sum(o => o.TotalAmount) ?? 0;
                        Console.WriteLine($"PartnerId: {partner.PartnerId}, TotalSales: {totalSales}");

                        var discount = CalculatePartnerDiscount(context, partner.PartnerId);
                        Console.WriteLine($"PartnerId: {partner.PartnerId}, Calculated Discount: {discount}");

                        partner.TotalSalesVolume = totalSales;
                        partner.CurrentDiscount = discount;

                        context.Entry(partner).State = EntityState.Modified;
                    }

                    context.SaveChanges();
                }

                LoadPartners();

                MessageBox.Show("Скидки всех партнеров успешно обновлены!");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка при обновлении скидок: {ex.Message}");
            }
        }


        public static decimal CalculatePartnerDiscount(TestEkzContext context, int partnerId)
        {
            var totalSales = context.Orders
                .Where(o => o.PartnerId == partnerId)
                .Sum(o => o.TotalAmount);

            if (totalSales < 10000)
                return 0;
            else if (totalSales < 50000)
                return 5;
            else if (totalSales < 300000)
                return 10;
            else
                return 15;
        }
    }
}