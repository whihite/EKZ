// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace TestEkz.Entities
{
    public partial class TestEkzContext : DbContext
    {
        public TestEkzContext()
        {
        }

        public TestEkzContext(DbContextOptions<TestEkzContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderItem> OrderItems { get; set; }
        public virtual DbSet<Partner> Partners { get; set; }
        public virtual DbSet<PartnerSalesHistory> PartnerSalesHistories { get; set; }
        public virtual DbSet<PartnerType> PartnerTypes { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductMaterial> ProductMaterials { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SalesPoint> SalesPoints { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<WarehouseTransaction> WarehouseTransactions { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=HoneyPot\\SQLEXPRESS;" +
                                            "Initial Catalog=TestEkz;Integrated Security=True;MultipleActiveResultSets=True;" +
                                            "TrustServerCertificate=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasIndex(e => e.Username, "UQ__Employee__536C85E475E9CFB6")
                    .IsUnique();

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.AccountStatus).HasDefaultValueSql("((1))");

                entity.Property(e => e.BankDetails).HasMaxLength(100);

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HealthStatus).HasMaxLength(100);

                entity.Property(e => e.LastLogin).HasColumnType("datetime");

                entity.Property(e => e.MaritalStatus).HasMaxLength(50);

                entity.Property(e => e.PassportData).HasMaxLength(100);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employees_Roles");
            });

            modelBuilder.Entity<Material>(entity =>
            {
                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.Cost).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.CurrentStock).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.MaterialType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MinStockLevel).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.UnitOfMeasure)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Supplier)
                    .WithMany(p => p.Materials)
                    .HasForeignKey(d => d.SupplierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Materials_Suppliers");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.DeliveryMethod).HasMaxLength(50);

                entity.Property(e => e.DiscountAmount)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.ManagerId).HasColumnName("ManagerID");

                entity.Property(e => e.OrderDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PartnerId).HasColumnName("PartnerID");

                entity.Property(e => e.PrepaymentAmount).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TotalAmount).HasColumnType("decimal(15, 2)");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.ManagerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Employees");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Partners");
            });

            modelBuilder.Entity<OrderItem>(entity =>
            {
                entity.Property(e => e.OrderItemId).HasColumnName("OrderItemID");

                entity.Property(e => e.OrderId).HasColumnName("OrderID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.UnitPrice).HasColumnType("decimal(15, 2)");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItems_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItems_Products");
            });

            modelBuilder.Entity<Partner>(entity =>
            {
                entity.HasIndex(e => e.TaxId, "UQ__Partners__711BE08D4AFECD34")
                    .IsUnique();

                entity.Property(e => e.PartnerId).HasColumnName("PartnerID");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CurrentDiscount)
                    .HasColumnType("decimal(5, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.Property(e => e.DirectorName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LegalAddress)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PartnerTypeId).HasColumnName("PartnerTypeID");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Rating)
                    .HasColumnType("decimal(3, 2)")
                    .HasDefaultValueSql("((5.00))");

                entity.Property(e => e.TaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("TaxID");

                entity.Property(e => e.TotalSalesVolume)
                    .HasColumnType("decimal(15, 2)")
                    .HasDefaultValueSql("((0.00))");

                entity.HasOne(d => d.PartnerType)
                    .WithMany(p => p.Partners)
                    .HasForeignKey(d => d.PartnerTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Partners_PartnerTypes");
            });

            modelBuilder.Entity<PartnerSalesHistory>(entity =>
            {
                entity.HasKey(e => e.HistoryId)
                    .HasName("PK__PartnerS__4D7B4ADD1C0917E1");

                entity.ToTable("PartnerSalesHistory");

                entity.Property(e => e.HistoryId).HasColumnName("HistoryID");

                entity.Property(e => e.PartnerId).HasColumnName("PartnerID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.SaleAmount).HasColumnType("decimal(15, 2)");

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.PartnerSalesHistories)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerSalesHistory_Partners");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PartnerSalesHistories)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PartnerSalesHistory_Products");
            });

            modelBuilder.Entity<PartnerType>(entity =>
            {
                entity.Property(e => e.PartnerTypeId).HasColumnName("PartnerTypeID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasIndex(e => e.Sku, "UQ__Products__CA1ECF0D85962A6A")
                    .IsUnique();

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.MinPartnerPrice).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.PackageHeight).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.PackageLength).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.PackageWidth).HasColumnType("decimal(8, 2)");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");

                entity.Property(e => e.ProductionCost).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.Sku)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("SKU");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductTypes");
            });

            modelBuilder.Entity<ProductMaterial>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.MaterialId })
                    .HasName("PK__ProductM__D85CA7DC21BD916F");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 3)");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.ProductMaterials)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductMaterials_Materials");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductMaterials)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductMaterials_Products");
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SalesPoint>(entity =>
            {
                entity.Property(e => e.SalesPointId).HasColumnName("SalesPointID");

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.ContactPhone).HasMaxLength(20);

                entity.Property(e => e.PartnerId).HasColumnName("PartnerID");

                entity.Property(e => e.PointType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Partner)
                    .WithMany(p => p.SalesPoints)
                    .HasForeignKey(d => d.PartnerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalesPoint_Partners");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasIndex(e => e.TaxId, "UQ__Supplier__711BE08DA53E5E86")
                    .IsUnique();

                entity.Property(e => e.SupplierId).HasColumnName("SupplierID");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ContactDetails).HasMaxLength(100);

                entity.Property(e => e.LegalAddress).HasMaxLength(255);

                entity.Property(e => e.Rating)
                    .HasColumnType("decimal(3, 2)")
                    .HasDefaultValueSql("((5.00))");

                entity.Property(e => e.SupplierType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TaxId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("TaxID");
            });

            modelBuilder.Entity<WarehouseTransaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("PK__Warehous__55433A4B657F3DBF");

                entity.Property(e => e.TransactionId).HasColumnName("TransactionID");

                entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");

                entity.Property(e => e.MaterialId).HasColumnName("MaterialID");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.Quantity).HasColumnType("decimal(12, 3)");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.TransactionType)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.WarehouseTransactions)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarehouseTransactions_Employees");

                entity.HasOne(d => d.Material)
                    .WithMany(p => p.WarehouseTransactions)
                    .HasForeignKey(d => d.MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_WarehouseTransactions_Materials");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.WarehouseTransactions)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_WarehouseTransactions_Products");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}